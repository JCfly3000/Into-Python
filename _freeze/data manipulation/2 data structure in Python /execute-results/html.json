{
  "hash": "31a3643f271b49efce0937770cb2ca8a",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Data structure in Python\"\nauthor: \"Tony Duan\"\n\nexecute:\n  warning: false\n  error: false\nformat:\n  html:\n    toc: true\n    toc-location: right\n    code-fold: show\n    code-tools: true\n    number-sections: true\n    code-block-bg: true\n    code-block-border-left: \"#31BAE9\"\n---\n\n![](images/python-data-structures.png){width=\"500\"}\n\n\n# bulid-in data Structures\n\n## singular\n\n::: {#9e17f50d .cell execution_count=1}\n``` {.python .cell-code}\na=1\ntype(a)\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\nint\n```\n:::\n:::\n\n\n::: {#19201336 .cell execution_count=2}\n``` {.python .cell-code}\na=1.3\ntype(a)\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```\nfloat\n```\n:::\n:::\n\n\n::: {#c0765ccc .cell execution_count=3}\n``` {.python .cell-code}\na='hell'\ntype(a)\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```\nstr\n```\n:::\n:::\n\n\n::: {#ee7c27ec .cell execution_count=4}\n``` {.python .cell-code}\na= True\ntype(a)\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```\nbool\n```\n:::\n:::\n\n\n## list\n\n::: {#05cb2ced .cell execution_count=5}\n``` {.python .cell-code}\na=[1,2,3]\n\na\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```\n[1, 2, 3]\n```\n:::\n:::\n\n\n::: {#641b670f .cell execution_count=6}\n``` {.python .cell-code}\ntype(a) \n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```\nlist\n```\n:::\n:::\n\n\n::: {#823f420f .cell execution_count=7}\n``` {.python .cell-code}\nfruits = ['orange', 'apple', 'pear', 'banana', 'kiwi', 'apple', 'banana','apple']\n```\n:::\n\n\n### find length of the list with `len()`\n\n::: {#51f6de0f .cell execution_count=8}\n``` {.python .cell-code}\nlen(fruits)\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```\n8\n```\n:::\n:::\n\n\n### first 2 on the list\n\n::: {#d2cf9277 .cell execution_count=9}\n``` {.python .cell-code}\nfruits[:2]\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```\n['orange', 'apple']\n```\n:::\n:::\n\n\n### last 2 on the list\n\n::: {#e411a3d7 .cell execution_count=10}\n``` {.python .cell-code}\nfruits[-2:]\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n```\n['banana', 'apple']\n```\n:::\n:::\n\n\n### find how many time in the list with `count()`\n\n::: {#d8ba3d35 .cell execution_count=11}\n``` {.python .cell-code}\nfruits.count('apple')\n```\n\n::: {.cell-output .cell-output-display execution_count=11}\n```\n3\n```\n:::\n:::\n\n\n### find locaiton of on the list with `index()`\n\nshow the first 'apple' index. python list start at 0\n\n::: {#677ba6a6 .cell execution_count=12}\n``` {.python .cell-code}\nfruits.index('apple')\n```\n\n::: {.cell-output .cell-output-display execution_count=12}\n```\n1\n```\n:::\n:::\n\n\nall 'apple' in the list\n\n::: {#64c784cb .cell execution_count=13}\n``` {.python .cell-code}\n[index for index, value in enumerate(fruits) if value == 'apple']\n```\n\n::: {.cell-output .cell-output-display execution_count=13}\n```\n[1, 5, 7]\n```\n:::\n:::\n\n\n### reverse the list\n\n::: {#4db2e998 .cell execution_count=14}\n``` {.python .cell-code}\nfruits.reverse()\nfruits\n```\n\n::: {.cell-output .cell-output-display execution_count=14}\n```\n['apple', 'banana', 'apple', 'kiwi', 'banana', 'pear', 'apple', 'orange']\n```\n:::\n:::\n\n\n### sort the list\n\n::: {#cd387eb6 .cell execution_count=15}\n``` {.python .cell-code}\nfruits.sort()\nfruits\n```\n\n::: {.cell-output .cell-output-display execution_count=15}\n```\n['apple', 'apple', 'apple', 'banana', 'banana', 'kiwi', 'orange', 'pear']\n```\n:::\n:::\n\n\n### add element on the list\n\n::: {#2e99193a .cell execution_count=16}\n``` {.python .cell-code}\nfruits.append('grape')\nfruits\n```\n\n::: {.cell-output .cell-output-display execution_count=16}\n```\n['apple',\n 'apple',\n 'apple',\n 'banana',\n 'banana',\n 'kiwi',\n 'orange',\n 'pear',\n 'grape']\n```\n:::\n:::\n\n\n### drop last element\n\n::: {#ac736557 .cell execution_count=17}\n``` {.python .cell-code}\nfruits.pop()\n\nfruits\n```\n\n::: {.cell-output .cell-output-display execution_count=17}\n```\n['apple', 'apple', 'apple', 'banana', 'banana', 'kiwi', 'orange', 'pear']\n```\n:::\n:::\n\n\n### List Comprehensions\n\nusing loop:\n\n::: {#0a8e5e08 .cell execution_count=18}\n``` {.python .cell-code}\nsquares = []\nfor x in range(10):\n  squares.append(x**2)\n  \nsquares\n```\n\n::: {.cell-output .cell-output-display execution_count=18}\n```\n[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]\n```\n:::\n:::\n\n\nusing List Comprehensions\n\n::: {#7ad83c44 .cell execution_count=19}\n``` {.python .cell-code}\nsquares = [x**2 for x in range(10)]\nsquares\n```\n\n::: {.cell-output .cell-output-display execution_count=19}\n```\n[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]\n```\n:::\n:::\n\n\n### list to Tuples\n\n::: {#9e94641a .cell execution_count=20}\n``` {.python .cell-code}\ntuple(squares)\n```\n\n::: {.cell-output .cell-output-display execution_count=20}\n```\n(0, 1, 4, 9, 16, 25, 36, 49, 64, 81)\n```\n:::\n:::\n\n\n### list to set \n\n::: {#ea793816 .cell execution_count=21}\n``` {.python .cell-code}\nset(squares)\n```\n\n::: {.cell-output .cell-output-display execution_count=21}\n```\n{0, 1, 4, 9, 16, 25, 36, 49, 64, 81}\n```\n:::\n:::\n\n\n### list to dictionary \n\n#### one list to dictionary\n\n::: {#1053cb73 .cell execution_count=22}\n``` {.python .cell-code}\nlist=['a', 1, 'b', 2, 'c', 3]\n\ndef convert(lst):\n   res_dict = {}\n   for i in range(0, len(lst), 2):\n       res_dict[lst[i]] = lst[i + 1]\n   return res_dict\n \nconvert(list)\n```\n\n::: {.cell-output .cell-output-display execution_count=22}\n```\n{'a': 1, 'b': 2, 'c': 3}\n```\n:::\n:::\n\n\n#### two list to dictionary\n\n::: {#5000e534 .cell execution_count=23}\n``` {.python .cell-code}\nimport itertools\n\nkeys = ('name', 'age', 'food')\n\nvalues = ('Monty', 42, 'spam')\n\ndict(zip(keys, values))\n```\n\n::: {.cell-output .cell-output-display execution_count=23}\n```\n{'name': 'Monty', 'age': 42, 'food': 'spam'}\n```\n:::\n:::\n\n\n## Tuples\n\n::: {#5cfe9619 .cell execution_count=24}\n``` {.python .cell-code}\nfruits = ('orange', 'apple', 'pear', 'banana', 'kiwi', 'apple', 'banana','apple')\n\nfruits\n```\n\n::: {.cell-output .cell-output-display execution_count=24}\n```\n('orange', 'apple', 'pear', 'banana', 'kiwi', 'apple', 'banana', 'apple')\n```\n:::\n:::\n\n\n::: {#11a6ebfb .cell execution_count=25}\n``` {.python .cell-code}\ntype(fruits)\n```\n\n::: {.cell-output .cell-output-display execution_count=25}\n```\ntuple\n```\n:::\n:::\n\n\ntuple can not be modified.\n\n## Sets\n\nA set is an unordered collection with no duplicate elements.\n\n::: {#c822cb25 .cell execution_count=26}\n``` {.python .cell-code}\nbasket = {'apple', 'orange', 'apple', 'pear', 'orange', 'banana'}\n\nbasket\n```\n\n::: {.cell-output .cell-output-display execution_count=26}\n```\n{'apple', 'banana', 'orange', 'pear'}\n```\n:::\n:::\n\n\n::: {#91eb15b8 .cell execution_count=27}\n``` {.python .cell-code}\ntype(basket)\n```\n\n::: {.cell-output .cell-output-display execution_count=27}\n```\nset\n```\n:::\n:::\n\n\n## Dictionaries\n\n::: {#8064fad8 .cell execution_count=28}\n``` {.python .cell-code}\ntel = {'jack': 4098, 'sape': 4139}\n\ntel\n```\n\n::: {.cell-output .cell-output-display execution_count=28}\n```\n{'jack': 4098, 'sape': 4139}\n```\n:::\n:::\n\n\n::: {#564d949b .cell execution_count=29}\n``` {.python .cell-code}\ntype(tel)\n```\n\n::: {.cell-output .cell-output-display execution_count=29}\n```\ndict\n```\n:::\n:::\n\n\n::: {#54b96583 .cell execution_count=30}\n``` {.python .cell-code}\ntel['jack']\n```\n\n::: {.cell-output .cell-output-display execution_count=30}\n```\n4098\n```\n:::\n:::\n\n\n# numpy data Structures(matrix in python)\n\nNumPy is the fundamental package for scientific computing in Python. It is a Python library that provides a multidimensional array object\n\nPython doesn't have a built-in type for matrices. However, we can treat a list of a list as a matrix\n\n::: {#9cf81793 .cell execution_count=31}\n``` {.python .cell-code}\nA = [[1, 4, 5, 12], \n    [-5, 8, 9, 0],\n    [-6, 7, 11, 19]]\n    \nA\n```\n\n::: {.cell-output .cell-output-display execution_count=31}\n```\n[[1, 4, 5, 12], [-5, 8, 9, 0], [-6, 7, 11, 19]]\n```\n:::\n:::\n\n\n## numpy Array\n\n::: {#db667aef .cell execution_count=32}\n``` {.python .cell-code}\nimport numpy as np\n\nA2 = np.array([[1, 2, 3], [3, 4, 5]])\nprint(A2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1 2 3]\n [3 4 5]]\n```\n:::\n:::\n\n\n::: {#544aa47b .cell execution_count=33}\n``` {.python .cell-code}\ntype(A2)\n```\n\n::: {.cell-output .cell-output-display execution_count=33}\n```\nnumpy.ndarray\n```\n:::\n:::\n\n\n## shape\n\n::: {#1bd09515 .cell execution_count=34}\n``` {.python .cell-code}\nA2.shape\n```\n\n::: {.cell-output .cell-output-display execution_count=34}\n```\n(2, 3)\n```\n:::\n:::\n\n\n## row number\n\n::: {#8edc9e67 .cell execution_count=35}\n``` {.python .cell-code}\nlen(A2)\n```\n\n::: {.cell-output .cell-output-display execution_count=35}\n```\n2\n```\n:::\n:::\n\n\n## total elements\n\n::: {#535a50d1 .cell execution_count=36}\n``` {.python .cell-code}\nA2.size\n```\n\n::: {.cell-output .cell-output-display execution_count=36}\n```\n6\n```\n:::\n:::\n\n\n## dimension \n\n::: {#e86e0ad7 .cell execution_count=37}\n``` {.python .cell-code}\nA2.ndim\n```\n\n::: {.cell-output .cell-output-display execution_count=37}\n```\n2\n```\n:::\n:::\n\n\n## count numpy.ndarray\n\n::: {#acd9eeae .cell execution_count=38}\n``` {.python .cell-code}\nimport collections, numpy\na = numpy.array([0, 3, 0, 4])\ncollections.Counter(a)\n```\n\n::: {.cell-output .cell-output-display execution_count=38}\n```\nCounter({np.int64(0): 2, np.int64(3): 1, np.int64(4): 1})\n```\n:::\n:::\n\n\n### convert list into numpy array\n\n::: {#73249034 .cell execution_count=39}\n``` {.python .cell-code}\nA = [\n  [1, 4, 5, 12], \n  [-5, 8, 9, 0],\n  [-6, 7, 11, 19],\n  [1, 4, 5, 12], \n  [-5, 8, 9, 0],\n  [-6, 7, 11, 19],\n  [1, 4, 5, 12], \n  [-5, 8, 9, 0],\n  [-6, 7, 11, 19]\n  ]\n    \nA3 = np.array(A)\n\nprint(A3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[ 1  4  5 12]\n [-5  8  9  0]\n [-6  7 11 19]\n [ 1  4  5 12]\n [-5  8  9  0]\n [-6  7 11 19]\n [ 1  4  5 12]\n [-5  8  9  0]\n [-6  7 11 19]]\n```\n:::\n:::\n\n\n### selection\n\n\n#### first 5 row\n\n::: {#3af91b0c .cell execution_count=40}\n``` {.python .cell-code}\nA[:5]\n```\n\n::: {.cell-output .cell-output-display execution_count=40}\n```\n[[1, 4, 5, 12], [-5, 8, 9, 0], [-6, 7, 11, 19], [1, 4, 5, 12], [-5, 8, 9, 0]]\n```\n:::\n:::\n\n\n#### lst 5 row\n\n::: {#055a985a .cell execution_count=41}\n``` {.python .cell-code}\nA[:-5]\n```\n\n::: {.cell-output .cell-output-display execution_count=41}\n```\n[[1, 4, 5, 12], [-5, 8, 9, 0], [-6, 7, 11, 19], [1, 4, 5, 12]]\n```\n:::\n:::\n\n\n#### first row\n\n::: {#bdab12e2 .cell execution_count=42}\n``` {.python .cell-code}\nA[0]\n```\n\n::: {.cell-output .cell-output-display execution_count=42}\n```\n[1, 4, 5, 12]\n```\n:::\n:::\n\n\n#### first column\n\n::: {#85b9d827 .cell execution_count=43}\n``` {.python .cell-code}\nA2[:,0]\n```\n\n::: {.cell-output .cell-output-display execution_count=43}\n```\narray([1, 3])\n```\n:::\n:::\n\n\n#### first row and first column element\n\n::: {#4bd1104f .cell execution_count=44}\n``` {.python .cell-code}\nA2[0,0]\n```\n\n::: {.cell-output .cell-output-display execution_count=44}\n```\nnp.int64(1)\n```\n:::\n:::\n\n\n::: {#84368142 .cell execution_count=45}\n``` {.python .cell-code}\nA2.dtype\n```\n\n::: {.cell-output .cell-output-display execution_count=45}\n```\ndtype('int64')\n```\n:::\n:::\n\n\n#### 2 row and 3 column\n\n::: {#cf25b83e .cell execution_count=46}\n``` {.python .cell-code}\nA2[1,2]\n```\n\n::: {.cell-output .cell-output-display execution_count=46}\n```\nnp.int64(5)\n```\n:::\n:::\n\n\n#### filter \n\n##### filter all\n\n::: {#b60a65c7 .cell execution_count=47}\n``` {.python .cell-code}\nprint(A3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[ 1  4  5 12]\n [-5  8  9  0]\n [-6  7 11 19]\n [ 1  4  5 12]\n [-5  8  9  0]\n [-6  7 11 19]\n [ 1  4  5 12]\n [-5  8  9  0]\n [-6  7 11 19]]\n```\n:::\n:::\n\n\n::: {#b531af2d .cell execution_count=48}\n``` {.python .cell-code}\nA3>4\n```\n\n::: {.cell-output .cell-output-display execution_count=48}\n```\narray([[False, False,  True,  True],\n       [False,  True,  True, False],\n       [False,  True,  True,  True],\n       [False, False,  True,  True],\n       [False,  True,  True, False],\n       [False,  True,  True,  True],\n       [False, False,  True,  True],\n       [False,  True,  True, False],\n       [False,  True,  True,  True]])\n```\n:::\n:::\n\n\n::: {#691a8007 .cell execution_count=49}\n``` {.python .cell-code}\nA3[A3>4]\n```\n\n::: {.cell-output .cell-output-display execution_count=49}\n```\narray([ 5, 12,  8,  9,  7, 11, 19,  5, 12,  8,  9,  7, 11, 19,  5, 12,  8,\n        9,  7, 11, 19])\n```\n:::\n:::\n\n\n##### filter row \n\n::: {#5ff2636e .cell execution_count=50}\n``` {.python .cell-code}\nA3\n```\n\n::: {.cell-output .cell-output-display execution_count=50}\n```\narray([[ 1,  4,  5, 12],\n       [-5,  8,  9,  0],\n       [-6,  7, 11, 19],\n       [ 1,  4,  5, 12],\n       [-5,  8,  9,  0],\n       [-6,  7, 11, 19],\n       [ 1,  4,  5, 12],\n       [-5,  8,  9,  0],\n       [-6,  7, 11, 19]])\n```\n:::\n:::\n\n\nfilter secound column>5\n\n::: {#07dda081 .cell execution_count=51}\n``` {.python .cell-code}\nfilter_val=(A3>5)[:,2]\n```\n:::\n\n\nwhich only keep 2,3 row.\n\n::: {#33ee1d6a .cell execution_count=52}\n``` {.python .cell-code}\nA3[filter_val,0:]\n```\n\n::: {.cell-output .cell-output-display execution_count=52}\n```\narray([[-5,  8,  9,  0],\n       [-6,  7, 11, 19],\n       [-5,  8,  9,  0],\n       [-6,  7, 11, 19],\n       [-5,  8,  9,  0],\n       [-6,  7, 11, 19]])\n```\n:::\n:::\n\n\n### create numpy array\n\n#### create eye\n\n::: {#beaa54d2 .cell execution_count=53}\n``` {.python .cell-code}\nnp.eye(3)\n```\n\n::: {.cell-output .cell-output-display execution_count=53}\n```\narray([[1., 0., 0.],\n       [0., 1., 0.],\n       [0., 0., 1.]])\n```\n:::\n:::\n\n\n#### create zero\n\n::: {#13e9b334 .cell execution_count=54}\n``` {.python .cell-code}\nnp.zeros((2,3))\n```\n\n::: {.cell-output .cell-output-display execution_count=54}\n```\narray([[0., 0., 0.],\n       [0., 0., 0.]])\n```\n:::\n:::\n\n\n#### create ones\n\n::: {#7f645109 .cell execution_count=55}\n``` {.python .cell-code}\nnp.ones((2,3))\n```\n\n::: {.cell-output .cell-output-display execution_count=55}\n```\narray([[1., 1., 1.],\n       [1., 1., 1.]])\n```\n:::\n:::\n\n\n### compare\n\n::: {#62b1d919 .cell execution_count=56}\n``` {.python .cell-code}\n# Creating Array\na = np.array([1,2,3,4]) \nb = np.array([3,2,5,6])\n```\n:::\n\n\n::: {#9beee538 .cell execution_count=57}\n``` {.python .cell-code}\n# Comparing two arrays\nnp.greater(a, b)\n```\n\n::: {.cell-output .cell-output-display execution_count=57}\n```\narray([False, False, False, False])\n```\n:::\n:::\n\n\n::: {#b70bc941 .cell execution_count=58}\n``` {.python .cell-code}\na >= b\n```\n\n::: {.cell-output .cell-output-display execution_count=58}\n```\narray([False,  True, False, False])\n```\n:::\n:::\n\n\n::: {#681981ff .cell execution_count=59}\n``` {.python .cell-code}\n# Comparing two arrays\nnp.less(a, b)\n```\n\n::: {.cell-output .cell-output-display execution_count=59}\n```\narray([ True, False,  True,  True])\n```\n:::\n:::\n\n\n::: {#7f593c9c .cell execution_count=60}\n``` {.python .cell-code}\n# Comparing two arrays\nnp.equal(a, b)\n```\n\n::: {.cell-output .cell-output-display execution_count=60}\n```\narray([False,  True, False, False])\n```\n:::\n:::\n\n\n### reshape\n\n::: {#e873d509 .cell execution_count=61}\n``` {.python .cell-code}\na=np.arange(9).reshape(3, 3)\n\na\n```\n\n::: {.cell-output .cell-output-display execution_count=61}\n```\narray([[0, 1, 2],\n       [3, 4, 5],\n       [6, 7, 8]])\n```\n:::\n:::\n\n\n### calculation\n\n::: {#dadeebf7 .cell execution_count=62}\n``` {.python .cell-code}\nb=a*a\nb\n```\n\n::: {.cell-output .cell-output-display execution_count=62}\n```\narray([[ 0,  1,  4],\n       [ 9, 16, 25],\n       [36, 49, 64]])\n```\n:::\n:::\n\n\n::: {#51377ab6 .cell execution_count=63}\n``` {.python .cell-code}\nb=a+a\nb\n```\n\n::: {.cell-output .cell-output-display execution_count=63}\n```\narray([[ 0,  2,  4],\n       [ 6,  8, 10],\n       [12, 14, 16]])\n```\n:::\n:::\n\n\n### numpy array to dataframe\n\n::: {#70d7d820 .cell execution_count=64}\n``` {.python .cell-code}\nimport pandas as pd\ndf = pd.DataFrame(b, columns=['Column_A', 'Column_B', 'Column_C'])\n\ndf\n```\n\n::: {.cell-output .cell-output-display execution_count=64}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Column_A</th>\n      <th>Column_B</th>\n      <th>Column_C</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>2</td>\n      <td>4</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>6</td>\n      <td>8</td>\n      <td>10</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>12</td>\n      <td>14</td>\n      <td>16</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n# pandas series\n\n# Reference\n\nhttps://docs.python.org/3/tutorial/datastructures.html#\n\nhttps://numpy.org/doc/stable/user/basics.rec.html\n\n",
    "supporting": [
      "2 data structure in Python _files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}