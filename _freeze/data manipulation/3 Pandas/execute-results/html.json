{
  "hash": "1cf2199c5bb5d04fdecc7c83951b2947",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Data manipulation with Pandas\"\nauthor: \"Tony Duan\"\n\nexecute:\n  warning: false\n  error: false\nformat:\n  html:\n    toc: true\n    toc-location: right\n    code-fold: show\n    code-tools: true\n    number-sections: true\n    code-block-bg: true\n    code-block-border-left: \"#31BAE9\"\n---\n\n![](images/Pandas_logo.svg.png){width=\"600\"}\n\n\npandas is a fast, powerful, flexible and easy to use open source data analysis and manipulation tool,\nbuilt on top of the Python programming language.\n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport pandas as pd\nprint('pandas version', pd.__version__)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\npandas version 2.2.3\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\nimport os\n#os.system('pip show pandas')\n```\n:::\n\n\n\n## load package\n::: {.cell}\n\n```{.python .cell-code}\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pylab as plt\nimport seaborn as sns\n\n# from siuba.data import mtcars,penguins\n# \n# from siuba.siu import call\n# from siuba import _, mutate, filter, group_by, summarize,show_query\n# from siuba import *\n# \n# from siuba.data import mtcars,penguins\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmtcars=mtcars\n```\n:::\n\n\n::: {.cell}\n\n```{.python .cell-code}\nmtcars=r.mtcars\n```\n:::\n\n\n::: {.cell}\n\n```{.python .cell-code}\nsmall_mtcars = mtcars[[\"cyl\", \"mpg\",'hp']]\n\nsmall_mtcars=small_mtcars.head(5)\n```\n:::\n\n\n## get info on the data\n\n::: {.cell}\n\n```{.python .cell-code}\nsmall_mtcars.info()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n<class 'pandas.core.frame.DataFrame'>\nIndex: 5 entries, Mazda RX4 to Hornet Sportabout\nData columns (total 3 columns):\n #   Column  Non-Null Count  Dtype  \n---  ------  --------------  -----  \n 0   cyl     5 non-null      float64\n 1   mpg     5 non-null      float64\n 2   hp      5 non-null      float64\ndtypes: float64(3)\nmemory usage: 160.0+ bytes\n```\n\n\n:::\n:::\n\n\n\n## select column\n\n### get column names\n\n::: {.cell}\n\n```{.python .cell-code}\nlist(small_mtcars)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n['cyl', 'mpg', 'hp']\n```\n\n\n:::\n:::\n\n### select by name\n\n::: {.cell}\n\n```{.python .cell-code}\nsmall_mtcars [[\"cyl\", \"mpg\",'hp']]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                   cyl   mpg     hp\nMazda RX4          6.0  21.0  110.0\nMazda RX4 Wag      6.0  21.0  110.0\nDatsun 710         4.0  22.8   93.0\nHornet 4 Drive     6.0  21.4  110.0\nHornet Sportabout  8.0  18.7  175.0\n```\n\n\n:::\n:::\nother way:\n::: {.cell}\n\n```{.python .cell-code}\nsmall_mtcars.filter(items=['cyl', 'mpg','hp'])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                   cyl   mpg     hp\nMazda RX4          6.0  21.0  110.0\nMazda RX4 Wag      6.0  21.0  110.0\nDatsun 710         4.0  22.8   93.0\nHornet 4 Drive     6.0  21.4  110.0\nHornet Sportabout  8.0  18.7  175.0\n```\n\n\n:::\n:::\n\n\n### select columns by name match with 'p'\n\n::: {.cell}\n\n```{.python .cell-code}\nsmall_mtcars.loc[:,small_mtcars.columns.str.contains(\"p\")]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                    mpg     hp\nMazda RX4          21.0  110.0\nMazda RX4 Wag      21.0  110.0\nDatsun 710         22.8   93.0\nHornet 4 Drive     21.4  110.0\nHornet Sportabout  18.7  175.0\n```\n\n\n:::\n:::\n\nother way:\n::: {.cell}\n\n```{.python .cell-code}\nsmall_mtcars.filter(regex='p.*', axis=1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                    mpg     hp\nMazda RX4          21.0  110.0\nMazda RX4 Wag      21.0  110.0\nDatsun 710         22.8   93.0\nHornet 4 Drive     21.4  110.0\nHornet Sportabout  18.7  175.0\n```\n\n\n:::\n:::\n\n\n### select columns by index\n\n#### select first and 3rd columns\n::: {.cell}\n\n```{.python .cell-code}\nsmall_mtcars.iloc[[0,2]]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n            cyl   mpg     hp\nMazda RX4   6.0  21.0  110.0\nDatsun 710  4.0  22.8   93.0\n```\n\n\n:::\n:::\n\n\n#### select first to 3rd columns\n\n::: {.cell}\n\n```{.python .cell-code}\nsmall_mtcars[0:3]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n               cyl   mpg     hp\nMazda RX4      6.0  21.0  110.0\nMazda RX4 Wag  6.0  21.0  110.0\nDatsun 710     4.0  22.8   93.0\n```\n\n\n:::\n:::\n\n## drop column\n\n::: {.cell}\n\n```{.python .cell-code}\nsmall_mtcars.drop('cyl', axis=1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                    mpg     hp\nMazda RX4          21.0  110.0\nMazda RX4 Wag      21.0  110.0\nDatsun 710         22.8   93.0\nHornet 4 Drive     21.4  110.0\nHornet Sportabout  18.7  175.0\n```\n\n\n:::\n:::\n\n## Renaming column\n\n::: {.cell}\n\n```{.python .cell-code}\nsmall_mtcars.rename(columns={'mpg':\"new_name_mpg\", 'cyl':'new_name_cyl'})\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                   new_name_cyl  new_name_mpg     hp\nMazda RX4                   6.0          21.0  110.0\nMazda RX4 Wag               6.0          21.0  110.0\nDatsun 710                  4.0          22.8   93.0\nHornet 4 Drive              6.0          21.4  110.0\nHornet Sportabout           8.0          18.7  175.0\n```\n\n\n:::\n:::\n\n## Create column\n\n### Mutate\n::: {.cell}\n\n```{.python .cell-code}\nsmall_mtcars['mpg2'] = small_mtcars['mpg']+1\n\n\nsmall_mtcars['mpg3']  = np.where(small_mtcars['mpg']> 20, \"long\", \"short\")\n\n\nsmall_mtcars['mpg4'] =np.where(small_mtcars[\"mpg\"]<19, \"short\",\n                   np.where(small_mtcars[\"mpg\"]<=22, \"Medium\",\n                   np.where(small_mtcars[\"mpg\"]>22, \"long\",\"else\")))\n\n\nsmall_mtcars\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                   cyl   mpg     hp  mpg2   mpg3    mpg4\nMazda RX4          6.0  21.0  110.0  22.0   long  Medium\nMazda RX4 Wag      6.0  21.0  110.0  22.0   long  Medium\nDatsun 710         4.0  22.8   93.0  23.8   long    long\nHornet 4 Drive     6.0  21.4  110.0  22.4   long  Medium\nHornet Sportabout  8.0  18.7  175.0  19.7  short   short\n```\n\n\n:::\n:::\n\n### Transmute,create column and only keep this column\n\n::: {.cell}\n\n```{.python .cell-code}\nsmall_mtcars['mpg2'] = small_mtcars['mpg']+1\n\nnew_data=small_mtcars[['mpg2']]\n\nnew_data\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                   mpg2\nMazda RX4          22.0\nMazda RX4 Wag      22.0\nDatsun 710         23.8\nHornet 4 Drive     22.4\nHornet Sportabout  19.7\n```\n\n\n:::\n:::\n\n\n\n\n## Filter rows\n\n::: {.cell}\n\n```{.python .cell-code}\nmtcars[(mtcars['gear'] ==4)]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                 mpg  cyl   disp     hp  drat  ...   qsec   vs   am  gear  carb\nMazda RX4       21.0  6.0  160.0  110.0  3.90  ...  16.46  0.0  1.0   4.0   4.0\nMazda RX4 Wag   21.0  6.0  160.0  110.0  3.90  ...  17.02  0.0  1.0   4.0   4.0\nDatsun 710      22.8  4.0  108.0   93.0  3.85  ...  18.61  1.0  1.0   4.0   1.0\nMerc 240D       24.4  4.0  146.7   62.0  3.69  ...  20.00  1.0  0.0   4.0   2.0\nMerc 230        22.8  4.0  140.8   95.0  3.92  ...  22.90  1.0  0.0   4.0   2.0\nMerc 280        19.2  6.0  167.6  123.0  3.92  ...  18.30  1.0  0.0   4.0   4.0\nMerc 280C       17.8  6.0  167.6  123.0  3.92  ...  18.90  1.0  0.0   4.0   4.0\nFiat 128        32.4  4.0   78.7   66.0  4.08  ...  19.47  1.0  1.0   4.0   1.0\nHonda Civic     30.4  4.0   75.7   52.0  4.93  ...  18.52  1.0  1.0   4.0   2.0\nToyota Corolla  33.9  4.0   71.1   65.0  4.22  ...  19.90  1.0  1.0   4.0   1.0\nFiat X1-9       27.3  4.0   79.0   66.0  4.08  ...  18.90  1.0  1.0   4.0   1.0\nVolvo 142E      21.4  4.0  121.0  109.0  4.11  ...  18.60  1.0  1.0   4.0   2.0\n\n[12 rows x 11 columns]\n```\n\n\n:::\n:::\nother way:\n::: {.cell}\n\n```{.python .cell-code}\nmtcars.query('gear==4')\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                 mpg  cyl   disp     hp  drat  ...   qsec   vs   am  gear  carb\nMazda RX4       21.0  6.0  160.0  110.0  3.90  ...  16.46  0.0  1.0   4.0   4.0\nMazda RX4 Wag   21.0  6.0  160.0  110.0  3.90  ...  17.02  0.0  1.0   4.0   4.0\nDatsun 710      22.8  4.0  108.0   93.0  3.85  ...  18.61  1.0  1.0   4.0   1.0\nMerc 240D       24.4  4.0  146.7   62.0  3.69  ...  20.00  1.0  0.0   4.0   2.0\nMerc 230        22.8  4.0  140.8   95.0  3.92  ...  22.90  1.0  0.0   4.0   2.0\nMerc 280        19.2  6.0  167.6  123.0  3.92  ...  18.30  1.0  0.0   4.0   4.0\nMerc 280C       17.8  6.0  167.6  123.0  3.92  ...  18.90  1.0  0.0   4.0   4.0\nFiat 128        32.4  4.0   78.7   66.0  4.08  ...  19.47  1.0  1.0   4.0   1.0\nHonda Civic     30.4  4.0   75.7   52.0  4.93  ...  18.52  1.0  1.0   4.0   2.0\nToyota Corolla  33.9  4.0   71.1   65.0  4.22  ...  19.90  1.0  1.0   4.0   1.0\nFiat X1-9       27.3  4.0   79.0   66.0  4.08  ...  18.90  1.0  1.0   4.0   1.0\nVolvo 142E      21.4  4.0  121.0  109.0  4.11  ...  18.60  1.0  1.0   4.0   2.0\n\n[12 rows x 11 columns]\n```\n\n\n:::\n:::\n\n### Filters with AND conditions\n\n::: {.cell}\n\n```{.python .cell-code}\nmtcars[(mtcars['cyl'] >4)&(mtcars['gear'] ==5) ]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                 mpg  cyl   disp     hp  drat    wt  qsec   vs   am  gear  carb\nFord Pantera L  15.8  8.0  351.0  264.0  4.22  3.17  14.5  0.0  1.0   5.0   4.0\nFerrari Dino    19.7  6.0  145.0  175.0  3.62  2.77  15.5  0.0  1.0   5.0   6.0\nMaserati Bora   15.0  8.0  301.0  335.0  3.54  3.57  14.6  0.0  1.0   5.0   8.0\n```\n\n\n:::\n:::\nother way:\n::: {.cell}\n\n```{.python .cell-code}\nmtcars.query('cyl>4 and gear==5')\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                 mpg  cyl   disp     hp  drat    wt  qsec   vs   am  gear  carb\nFord Pantera L  15.8  8.0  351.0  264.0  4.22  3.17  14.5  0.0  1.0   5.0   4.0\nFerrari Dino    19.7  6.0  145.0  175.0  3.62  2.77  15.5  0.0  1.0   5.0   6.0\nMaserati Bora   15.0  8.0  301.0  335.0  3.54  3.57  14.6  0.0  1.0   5.0   8.0\n```\n\n\n:::\n:::\n\n### Filters with OR conditions\n\n\n::: {.cell}\n\n```{.python .cell-code}\nmtcars[(mtcars['cyl'] ==6) |(mtcars['gear'] ==5) ]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                 mpg  cyl   disp     hp  drat  ...   qsec   vs   am  gear  carb\nMazda RX4       21.0  6.0  160.0  110.0  3.90  ...  16.46  0.0  1.0   4.0   4.0\nMazda RX4 Wag   21.0  6.0  160.0  110.0  3.90  ...  17.02  0.0  1.0   4.0   4.0\nHornet 4 Drive  21.4  6.0  258.0  110.0  3.08  ...  19.44  1.0  0.0   3.0   1.0\nValiant         18.1  6.0  225.0  105.0  2.76  ...  20.22  1.0  0.0   3.0   1.0\nMerc 280        19.2  6.0  167.6  123.0  3.92  ...  18.30  1.0  0.0   4.0   4.0\nMerc 280C       17.8  6.0  167.6  123.0  3.92  ...  18.90  1.0  0.0   4.0   4.0\nPorsche 914-2   26.0  4.0  120.3   91.0  4.43  ...  16.70  0.0  1.0   5.0   2.0\nLotus Europa    30.4  4.0   95.1  113.0  3.77  ...  16.90  1.0  1.0   5.0   2.0\nFord Pantera L  15.8  8.0  351.0  264.0  4.22  ...  14.50  0.0  1.0   5.0   4.0\nFerrari Dino    19.7  6.0  145.0  175.0  3.62  ...  15.50  0.0  1.0   5.0   6.0\nMaserati Bora   15.0  8.0  301.0  335.0  3.54  ...  14.60  0.0  1.0   5.0   8.0\n\n[11 rows x 11 columns]\n```\n\n\n:::\n:::\n\nother way:\n::: {.cell}\n\n```{.python .cell-code}\nmtcars.query('cyl==6 or gear==5')\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                 mpg  cyl   disp     hp  drat  ...   qsec   vs   am  gear  carb\nMazda RX4       21.0  6.0  160.0  110.0  3.90  ...  16.46  0.0  1.0   4.0   4.0\nMazda RX4 Wag   21.0  6.0  160.0  110.0  3.90  ...  17.02  0.0  1.0   4.0   4.0\nHornet 4 Drive  21.4  6.0  258.0  110.0  3.08  ...  19.44  1.0  0.0   3.0   1.0\nValiant         18.1  6.0  225.0  105.0  2.76  ...  20.22  1.0  0.0   3.0   1.0\nMerc 280        19.2  6.0  167.6  123.0  3.92  ...  18.30  1.0  0.0   4.0   4.0\nMerc 280C       17.8  6.0  167.6  123.0  3.92  ...  18.90  1.0  0.0   4.0   4.0\nPorsche 914-2   26.0  4.0  120.3   91.0  4.43  ...  16.70  0.0  1.0   5.0   2.0\nLotus Europa    30.4  4.0   95.1  113.0  3.77  ...  16.90  1.0  1.0   5.0   2.0\nFord Pantera L  15.8  8.0  351.0  264.0  4.22  ...  14.50  0.0  1.0   5.0   4.0\nFerrari Dino    19.7  6.0  145.0  175.0  3.62  ...  15.50  0.0  1.0   5.0   6.0\nMaserati Bora   15.0  8.0  301.0  335.0  3.54  ...  14.60  0.0  1.0   5.0   8.0\n\n[11 rows x 11 columns]\n```\n\n\n:::\n:::\n\n\n### filter row with index\n\n#### 5th rows\n::: {.cell}\n\n```{.python .cell-code}\n# not in siuba, in pandas\nmtcars.iloc[[4]]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                    mpg  cyl   disp     hp  drat  ...   qsec   vs   am  gear  carb\nHornet Sportabout  18.7  8.0  360.0  175.0  3.15  ...  17.02  0.0  0.0   3.0   2.0\n\n[1 rows x 11 columns]\n```\n\n\n:::\n:::\n\n#### 1 and 5tj rows\n::: {.cell}\n\n```{.python .cell-code}\n# not in siuba, in pandas\nmtcars.iloc[[0,4]]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                    mpg  cyl   disp     hp  drat  ...   qsec   vs   am  gear  carb\nMazda RX4          21.0  6.0  160.0  110.0  3.90  ...  16.46  0.0  1.0   4.0   4.0\nHornet Sportabout  18.7  8.0  360.0  175.0  3.15  ...  17.02  0.0  0.0   3.0   2.0\n\n[2 rows x 11 columns]\n```\n\n\n:::\n:::\n\n#### 1 to 5th rows\n::: {.cell}\n\n```{.python .cell-code}\n# not in siuba, in pandas\nmtcars.iloc[0:4]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                 mpg  cyl   disp     hp  drat  ...   qsec   vs   am  gear  carb\nMazda RX4       21.0  6.0  160.0  110.0  3.90  ...  16.46  0.0  1.0   4.0   4.0\nMazda RX4 Wag   21.0  6.0  160.0  110.0  3.90  ...  17.02  0.0  1.0   4.0   4.0\nDatsun 710      22.8  4.0  108.0   93.0  3.85  ...  18.61  1.0  1.0   4.0   1.0\nHornet 4 Drive  21.4  6.0  258.0  110.0  3.08  ...  19.44  1.0  0.0   3.0   1.0\n\n[4 rows x 11 columns]\n```\n\n\n:::\n:::\n#### get ramdon 5 rows\n\n::: {.cell}\n\n```{.python .cell-code}\nmtcars.sample(5, random_state=42)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                      mpg  cyl   disp     hp  drat  ...   qsec   vs   am  gear  carb\nFerrari Dino         19.7  6.0  145.0  175.0  3.62  ...  15.50  0.0  1.0   5.0   6.0\nLincoln Continental  10.4  8.0  460.0  215.0  3.00  ...  17.82  0.0  0.0   3.0   4.0\nPontiac Firebird     19.2  8.0  400.0  175.0  3.08  ...  17.05  0.0  0.0   3.0   2.0\nFiat 128             32.4  4.0   78.7   66.0  4.08  ...  19.47  1.0  1.0   4.0   1.0\nMerc 230             22.8  4.0  140.8   95.0  3.92  ...  22.90  1.0  0.0   4.0   2.0\n\n[5 rows x 11 columns]\n```\n\n\n:::\n:::\n\n\n## Append\n\n\n### append by row\n\n::: {.cell}\n\n```{.python .cell-code}\n# not available in siuba yet\n#from siuba import bind_rows\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\n# using pandas\n\n# get 1 to 4 rows\ndata1=mtcars.iloc[0:4]\n\n# get 9 rows\ndata2=mtcars.iloc[10:11]\n\ndata3=pd.concat([data1, data2], ignore_index = True,axis=0)\n\ndata3\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    mpg  cyl   disp     hp  drat     wt   qsec   vs   am  gear  carb\n0  21.0  6.0  160.0  110.0  3.90  2.620  16.46  0.0  1.0   4.0   4.0\n1  21.0  6.0  160.0  110.0  3.90  2.875  17.02  0.0  1.0   4.0   4.0\n2  22.8  4.0  108.0   93.0  3.85  2.320  18.61  1.0  1.0   4.0   1.0\n3  21.4  6.0  258.0  110.0  3.08  3.215  19.44  1.0  0.0   3.0   1.0\n4  17.8  6.0  167.6  123.0  3.92  3.440  18.90  1.0  0.0   4.0   4.0\n```\n\n\n:::\n:::\n\n\n### append by column\n\n::: {.cell}\n\n```{.python .cell-code}\n# not available in siuba yet\n#from siuba import bind_columns\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\n# using pandas\n# data1=small_mtcars>>select(_.mpg)\n# \n# data2=small_mtcars>>select(_.cyl)\n# \n# data3=pd.concat([data1, data2],axis=1)\n# \n# data3\n```\n:::\n\n\n### Dropping NA values\n\n\n### keep NA values\n\n\n\n## group by\n\n### average,min,max,sum\n\n::: {.cell}\n\n```{.python .cell-code}\nmtcars.groupby(\"cyl\")[\"hp\"].mean()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\ncyl\n4.0     82.636364\n6.0    122.285714\n8.0    209.214286\nName: hp, dtype: float64\n```\n\n\n:::\n:::\n::: {.cell}\n\n```{.python .cell-code}\nmtcars.groupby(\"cyl\")[\"hp\"].min()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\ncyl\n4.0     52.0\n6.0    105.0\n8.0    150.0\nName: hp, dtype: float64\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\nmtcars.groupby(\"cyl\")[\"hp\"].max()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\ncyl\n4.0    113.0\n6.0    175.0\n8.0    335.0\nName: hp, dtype: float64\n```\n\n\n:::\n:::\n\n\n::: {.cell}\n\n```{.python .cell-code}\nmtcars.groupby(\"cyl\")[\"hp\"].sum()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\ncyl\n4.0     909.0\n6.0     856.0\n8.0    2929.0\nName: hp, dtype: float64\n```\n\n\n:::\n:::\n\n### count record and count distinct record\n\n::: {.cell}\n\n```{.python .cell-code}\nmtcars.groupby(\"cyl\")[\"hp\"].count()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\ncyl\n4.0    11\n6.0     7\n8.0    14\nName: hp, dtype: int64\n```\n\n\n:::\n:::\n\n\n::: {.cell}\n\n```{.python .cell-code}\nmtcars.groupby(\"cyl\")[\"hp\"].nunique()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\ncyl\n4.0    10\n6.0     4\n8.0     9\nName: hp, dtype: int64\n```\n\n\n:::\n:::\n\n\n## order rows\n\n::: {.cell}\n\n```{.python .cell-code}\nsmall_mtcars.sort_values('hp')\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                   cyl   mpg     hp  mpg2   mpg3    mpg4\nDatsun 710         4.0  22.8   93.0  23.8   long    long\nMazda RX4          6.0  21.0  110.0  22.0   long  Medium\nMazda RX4 Wag      6.0  21.0  110.0  22.0   long  Medium\nHornet 4 Drive     6.0  21.4  110.0  22.4   long  Medium\nHornet Sportabout  8.0  18.7  175.0  19.7  short   short\n```\n\n\n:::\n:::\n\n### Sort in descending order\n\n::: {.cell}\n\n```{.python .cell-code}\nsmall_mtcars.sort_values('hp',ascending=False)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                   cyl   mpg     hp  mpg2   mpg3    mpg4\nHornet Sportabout  8.0  18.7  175.0  19.7  short   short\nMazda RX4          6.0  21.0  110.0  22.0   long  Medium\nMazda RX4 Wag      6.0  21.0  110.0  22.0   long  Medium\nHornet 4 Drive     6.0  21.4  110.0  22.4   long  Medium\nDatsun 710         4.0  22.8   93.0  23.8   long    long\n```\n\n\n:::\n:::\n\n### Arrange by multiple variables\n\n\n::: {.cell}\n\n```{.python .cell-code}\nsmall_mtcars.sort_values(by=['cyl','mpg'])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                   cyl   mpg     hp  mpg2   mpg3    mpg4\nDatsun 710         4.0  22.8   93.0  23.8   long    long\nMazda RX4          6.0  21.0  110.0  22.0   long  Medium\nMazda RX4 Wag      6.0  21.0  110.0  22.0   long  Medium\nHornet 4 Drive     6.0  21.4  110.0  22.4   long  Medium\nHornet Sportabout  8.0  18.7  175.0  19.7  short   short\n```\n\n\n:::\n:::\n## join\n\n::: {.cell}\n\n```{.python .cell-code}\n\nlhs = pd.DataFrame({'id': [1,2,3], 'val': ['lhs.1', 'lhs.2', 'lhs.3']})\nrhs = pd.DataFrame({'id': [1,2,4], 'val': ['rhs.1', 'rhs.2', 'rhs.3']})\n```\n:::\n\n\n::: {.cell}\n\n```{.python .cell-code}\nlhs\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   id    val\n0   1  lhs.1\n1   2  lhs.2\n2   3  lhs.3\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\nrhs\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   id    val\n0   1  rhs.1\n1   2  rhs.2\n2   4  rhs.3\n```\n\n\n:::\n:::\n\n\n### inner_join\n\n::: {.cell}\n\n```{.python .cell-code}\nresult=pd.merge(lhs, rhs, on='id', how='inner')\nresult\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   id  val_x  val_y\n0   1  lhs.1  rhs.1\n1   2  lhs.2  rhs.2\n```\n\n\n:::\n:::\n\n\n### full join\n\n::: {.cell}\n\n```{.python .cell-code}\nresult=pd.merge(lhs, rhs, on='id', how='outer')\nresult\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   id  val_x  val_y\n0   1  lhs.1  rhs.1\n1   2  lhs.2  rhs.2\n2   3  lhs.3    NaN\n3   4    NaN  rhs.3\n```\n\n\n:::\n:::\n\n\n\n### left join \n\n::: {.cell}\n\n```{.python .cell-code}\nresult=pd.merge(lhs, rhs, on='id', how='left')\nresult\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   id  val_x  val_y\n0   1  lhs.1  rhs.1\n1   2  lhs.2  rhs.2\n2   3  lhs.3    NaN\n```\n\n\n:::\n:::\n\n\n### anti join\n\nkeep data in left which not in right\n::: {.cell}\n\n```{.python .cell-code}\n#in siuba\n# result=lhs >> anti_join(_, rhs, on=\"id\")\n# result\n```\n:::\n\n\nkeep data in right which not in left\n::: {.cell}\n\n```{.python .cell-code}\n#in siuba\n# result=rhs >> anti_join(_, lhs, on=\"id\")\n# result\n```\n:::\n\n\n## Reshape tables\n\n\n::: {.cell}\n\n```{.python .cell-code}\ncosts = pd.DataFrame({\n    'id': [1,2],\n    'price_x': [.1, .2],\n    'price_y': [.4, .5],\n    'price_z': [.7, .8]\n})\n\ncosts\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   id  price_x  price_y  price_z\n0   1      0.1      0.4      0.7\n1   2      0.2      0.5      0.8\n```\n\n\n:::\n:::\n\n\n### Gather data long(wide to long)\n\n::: {.cell}\n\n```{.python .cell-code}\n# selecting each variable manually\nlong_date=pd.melt(costs,id_vars=['id'], value_vars=['price_x', 'price_y','price_z'])\n\nlong_date\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   id variable  value\n0   1  price_x    0.1\n1   2  price_x    0.2\n2   1  price_y    0.4\n3   2  price_y    0.5\n4   1  price_z    0.7\n5   2  price_z    0.8\n```\n\n\n:::\n\n```{.python .cell-code}\n#costs >> gather('measure', 'value', _.price_x, _.price_y, _.price_z)\n```\n:::\n\n\n### Spread data wide (long to wide)\n\n\n::: {.cell}\n\n```{.python .cell-code}\nlong_date.pivot(index=\"id\", columns=\"variable\", values=\"value\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nvariable  price_x  price_y  price_z\nid                                 \n1             0.1      0.4      0.7\n2             0.2      0.5      0.8\n```\n\n\n:::\n:::\n\n\n\n\n## string\n\n::: {.cell}\n\n```{.python .cell-code}\ndf = pd.DataFrame({'text': ['abc', 'DDD','1243c','aeEe'], 'num': [3, 4,7,8]})\n\ndf\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    text  num\n0    abc    3\n1    DDD    4\n2  1243c    7\n3   aeEe    8\n```\n\n\n:::\n:::\n\n### upper case\n\n::: {.cell}\n\n```{.python .cell-code}\n#df>> mutate(text_new=_.text.str.upper())\n```\n:::\n### lower case\n\n::: {.cell}\n\n```{.python .cell-code}\n#df>> mutate(text_new=_.text.str.lower())\n```\n:::\n### match\n\n::: {.cell}\n\n```{.python .cell-code}\n# df>> mutate(text_new1=if_else(_.text== \"abc\",'T','F')\n#             ,text_new2=if_else(_.text.str.startswith(\"a\"),'T','F')\n#             ,text_new3=if_else(_.text.str.endswith(\"c\"),'T','F')\n#             ,text_new4=if_else(_.text.str.contains(\"4\"),'T','F')\n# \n# )\n```\n:::\n\n###  concatenation\n\n::: {.cell}\n\n```{.python .cell-code}\n# df>> mutate(text_new1=_.text+' is '+_.text\n# )\n```\n:::\n\n\n### replace\n\nUse .str.replace(..., regex=True) with regular expressions to replace patterns in strings.\n\nFor example, the code below uses \"p.\", where . is called a wildcard–which matches any character.\n\n::: {.cell}\n\n```{.python .cell-code}\n# df>> mutate(text_new1=_.text.str.replace(\"a.\", \"XX\", regex=True)\n# )\n```\n:::\n### extract\n\nUse str.extract() with a regular expression to pull out a matching piece of text.\n\nFor example the regular expression “^(.*) ” contains the following pieces:\n\n-  a matches the literal letter “a”\n\n- .* has a . which matches anything, and * which modifies it to apply 0 or more times.\n\n::: {.cell}\n\n```{.python .cell-code}\n# df>> mutate(text_new1=_.text.str.extract(\"a(.*)\")\n#             ,text_new2=_.text.str.extract(\"(.*)c\")\n# )\n```\n:::\n\n\n\n\n## date\n\n::: {.cell}\n\n```{.python .cell-code}\ndf_dates = pd.DataFrame({\n    \"dates\": pd.to_datetime([\"2021-01-02\", \"2021-02-03\"]),\n    \"raw\": [\"2023-04-05 06:07:08\", \"2024-05-06 07:08:09\"],\n})\ndf_dates\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n       dates                  raw\n0 2021-01-02  2023-04-05 06:07:08\n1 2021-02-03  2024-05-06 07:08:09\n```\n\n\n:::\n:::\n\n\n::: {.cell}\n\n```{.python .cell-code}\n# from datetime import datetime\n# \n# df_date=df_dates>>mutate(month=_.dates.dt.month_name()\n#                   ,date_format_raw = call(pd.to_datetime, _.raw)\n#                   ,date_format_raw_year=_.date_format_raw.dt.year\n# \n# )\n# \n# df_date\n```\n:::\n\n\n::: {.cell}\n\n```{.python .cell-code}\ndf_dates.info()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 2 entries, 0 to 1\nData columns (total 2 columns):\n #   Column  Non-Null Count  Dtype         \n---  ------  --------------  -----         \n 0   dates   2 non-null      datetime64[ns]\n 1   raw     2 non-null      object        \ndtypes: datetime64[ns](1), object(1)\nmemory usage: 164.0+ bytes\n```\n\n\n:::\n:::\n\n\n\n## dataframe to numpy array\n\n::: {.cell}\n\n```{.python .cell-code}\ndf_dates.to_numpy()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\narray([[Timestamp('2021-01-02 00:00:00'), '2023-04-05 06:07:08'],\n       [Timestamp('2021-02-03 00:00:00'), '2024-05-06 07:08:09']],\n      dtype=object)\n```\n\n\n:::\n:::\n\n\n\n\n# Reference:\n\nhttps://pandas.pydata.org/docs/user_guide\n\n\n\n\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}