{
  "hash": "c8fea502fe8c6ba86a66eabc6bbc4830",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Data manipulation with Pandas\"\nauthor: \"Tony Duan\"\n\nexecute:\n  warning: false\n  error: false\nformat:\n  html:\n    toc: true\n    toc-location: right\n    code-fold: show\n    code-tools: true\n    number-sections: true\n    code-block-bg: true\n    code-block-border-left: \"#31BAE9\"\n---\n\n![](images/Pandas_logo.svg.png){width=\"600\"}\n\n\npandas is a fast, powerful, flexible and easy to use open source data analysis and manipulation tool,\nbuilt on top of the Python programming language.\n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport pandas as pd\nprint('pandas version', pd.__version__)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\npandas version 2.2.3\n```\n\n\n:::\n:::\n\nShow package's dependencies\n::: {.cell}\n\n```{.python .cell-code}\nimport os\n#os.system('pip show pandas')\nfrom pip._vendor import pkg_resources\n_package_name = 'pandas'\n_package = pkg_resources.working_set.by_key[_package_name]\nprint([str(r) for r in _package.requires()])  # retrieve deps from setup.py\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n['numpy>=1.26.0; python_version >= \"3.12\"', 'python-dateutil>=2.8.2', 'pytz>=2020.1', 'tzdata>=2022.7']\n```\n\n\n:::\n:::\n\n\n\n## load package\n::: {.cell}\n\n```{.python .cell-code}\nimport pandas as pd\nfrom pandasql import sqldf\nimport numpy as np\nimport matplotlib.pylab as plt\nimport seaborn as sns\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmtcars=mtcars\n```\n:::\n\n\n::: {.cell}\n\n```{.python .cell-code}\nmtcars=r.mtcars\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\nmtcars.head(5)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                    mpg  cyl   disp     hp  drat  ...   qsec   vs   am  gear  carb\nMazda RX4          21.0  6.0  160.0  110.0  3.90  ...  16.46  0.0  1.0   4.0   4.0\nMazda RX4 Wag      21.0  6.0  160.0  110.0  3.90  ...  17.02  0.0  1.0   4.0   4.0\nDatsun 710         22.8  4.0  108.0   93.0  3.85  ...  18.61  1.0  1.0   4.0   1.0\nHornet 4 Drive     21.4  6.0  258.0  110.0  3.08  ...  19.44  1.0  0.0   3.0   1.0\nHornet Sportabout  18.7  8.0  360.0  175.0  3.15  ...  17.02  0.0  0.0   3.0   2.0\n\n[5 rows x 11 columns]\n```\n\n\n:::\n:::\n\n\nrow name to column\n::: {.cell}\n\n```{.python .cell-code}\nmtcars.index.name = 'newhead'\nmtcars.reset_index(inplace=True)\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\nmtcars.head(5)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n             newhead   mpg  cyl   disp     hp  ...   qsec   vs   am  gear  carb\n0          Mazda RX4  21.0  6.0  160.0  110.0  ...  16.46  0.0  1.0   4.0   4.0\n1      Mazda RX4 Wag  21.0  6.0  160.0  110.0  ...  17.02  0.0  1.0   4.0   4.0\n2         Datsun 710  22.8  4.0  108.0   93.0  ...  18.61  1.0  1.0   4.0   1.0\n3     Hornet 4 Drive  21.4  6.0  258.0  110.0  ...  19.44  1.0  0.0   3.0   1.0\n4  Hornet Sportabout  18.7  8.0  360.0  175.0  ...  17.02  0.0  0.0   3.0   2.0\n\n[5 rows x 12 columns]\n```\n\n\n:::\n:::\n\n\n::: {.cell}\n\n```{.python .cell-code}\nsmall_mtcars = mtcars[[\"cyl\", \"mpg\",'hp']]\nsmall_mtcars=small_mtcars.head(5)\nsmall_mtcars\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   cyl   mpg     hp\n0  6.0  21.0  110.0\n1  6.0  21.0  110.0\n2  4.0  22.8   93.0\n3  6.0  21.4  110.0\n4  8.0  18.7  175.0\n```\n\n\n:::\n:::\n\n\n## get info on the data\n\n::: {.cell}\n\n```{.python .cell-code}\nsmall_mtcars.info()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 5 entries, 0 to 4\nData columns (total 3 columns):\n #   Column  Non-Null Count  Dtype  \n---  ------  --------------  -----  \n 0   cyl     5 non-null      float64\n 1   mpg     5 non-null      float64\n 2   hp      5 non-null      float64\ndtypes: float64(3)\nmemory usage: 252.0 bytes\n```\n\n\n:::\n:::\n\n\n\n## select column\n\n### get column names\n\n::: {.cell}\n\n```{.python .cell-code}\nlist(small_mtcars)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n['cyl', 'mpg', 'hp']\n```\n\n\n:::\n:::\n\n### select by name\n\n::: {.cell}\n\n```{.python .cell-code}\nsmall_mtcars [[\"cyl\", \"mpg\",'hp']]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   cyl   mpg     hp\n0  6.0  21.0  110.0\n1  6.0  21.0  110.0\n2  4.0  22.8   93.0\n3  6.0  21.4  110.0\n4  8.0  18.7  175.0\n```\n\n\n:::\n:::\nother way:\n::: {.cell}\n\n```{.python .cell-code}\nsmall_mtcars.filter(items=['cyl', 'mpg','hp'])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   cyl   mpg     hp\n0  6.0  21.0  110.0\n1  6.0  21.0  110.0\n2  4.0  22.8   93.0\n3  6.0  21.4  110.0\n4  8.0  18.7  175.0\n```\n\n\n:::\n:::\n\n\n### select columns by name match with 'p'\n\n::: {.cell}\n\n```{.python .cell-code}\nsmall_mtcars.loc[:,small_mtcars.columns.str.contains(\"p\")]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    mpg     hp\n0  21.0  110.0\n1  21.0  110.0\n2  22.8   93.0\n3  21.4  110.0\n4  18.7  175.0\n```\n\n\n:::\n:::\n\nother way:\n::: {.cell}\n\n```{.python .cell-code}\nsmall_mtcars.filter(regex='p.*', axis=1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    mpg     hp\n0  21.0  110.0\n1  21.0  110.0\n2  22.8   93.0\n3  21.4  110.0\n4  18.7  175.0\n```\n\n\n:::\n:::\n\n\n### select columns by index\n\n#### select first and 3rd columns\n::: {.cell}\n\n```{.python .cell-code}\nsmall_mtcars.iloc[[0,2]]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   cyl   mpg     hp\n0  6.0  21.0  110.0\n2  4.0  22.8   93.0\n```\n\n\n:::\n:::\n\n\n#### select first to 3rd columns\n\n::: {.cell}\n\n```{.python .cell-code}\nsmall_mtcars[0:3]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   cyl   mpg     hp\n0  6.0  21.0  110.0\n1  6.0  21.0  110.0\n2  4.0  22.8   93.0\n```\n\n\n:::\n:::\n\n## drop column\n\n::: {.cell}\n\n```{.python .cell-code}\nsmall_mtcars.drop('cyl', axis=1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    mpg     hp\n0  21.0  110.0\n1  21.0  110.0\n2  22.8   93.0\n3  21.4  110.0\n4  18.7  175.0\n```\n\n\n:::\n:::\n\n## Renaming column\n\n::: {.cell}\n\n```{.python .cell-code}\nsmall_mtcars.rename(columns={'mpg':\"new_name_mpg\", 'cyl':'new_name_cyl'})\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   new_name_cyl  new_name_mpg     hp\n0           6.0          21.0  110.0\n1           6.0          21.0  110.0\n2           4.0          22.8   93.0\n3           6.0          21.4  110.0\n4           8.0          18.7  175.0\n```\n\n\n:::\n:::\n\n## Create column\n\n### Mutate\n::: {.cell}\n\n```{.python .cell-code}\nsmall_mtcars['mpg2'] = small_mtcars['mpg']+1\n\n\nsmall_mtcars['mpg3']  = np.where(small_mtcars['mpg']> 20, \"long\", \"short\")\n\n\nsmall_mtcars['mpg4'] =np.where(small_mtcars[\"mpg\"]<19, \"short\",\n                   np.where(small_mtcars[\"mpg\"]<=22, \"Medium\",\n                   np.where(small_mtcars[\"mpg\"]>22, \"long\",\"else\")))\n\n\nsmall_mtcars\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   cyl   mpg     hp  mpg2   mpg3    mpg4\n0  6.0  21.0  110.0  22.0   long  Medium\n1  6.0  21.0  110.0  22.0   long  Medium\n2  4.0  22.8   93.0  23.8   long    long\n3  6.0  21.4  110.0  22.4   long  Medium\n4  8.0  18.7  175.0  19.7  short   short\n```\n\n\n:::\n:::\n\n### Transmute,create column and only keep this column\n\n::: {.cell}\n\n```{.python .cell-code}\nsmall_mtcars['mpg2'] = small_mtcars['mpg']+1\n\nnew_data=small_mtcars[['mpg2']]\n\nnew_data\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   mpg2\n0  22.0\n1  22.0\n2  23.8\n3  22.4\n4  19.7\n```\n\n\n:::\n:::\n\n\n\n\n## Filter rows\n\n::: {.cell}\n\n```{.python .cell-code}\nmtcars[(mtcars['gear'] ==4)]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n           newhead   mpg  cyl   disp     hp  ...   qsec   vs   am  gear  carb\n0        Mazda RX4  21.0  6.0  160.0  110.0  ...  16.46  0.0  1.0   4.0   4.0\n1    Mazda RX4 Wag  21.0  6.0  160.0  110.0  ...  17.02  0.0  1.0   4.0   4.0\n2       Datsun 710  22.8  4.0  108.0   93.0  ...  18.61  1.0  1.0   4.0   1.0\n7        Merc 240D  24.4  4.0  146.7   62.0  ...  20.00  1.0  0.0   4.0   2.0\n8         Merc 230  22.8  4.0  140.8   95.0  ...  22.90  1.0  0.0   4.0   2.0\n9         Merc 280  19.2  6.0  167.6  123.0  ...  18.30  1.0  0.0   4.0   4.0\n10       Merc 280C  17.8  6.0  167.6  123.0  ...  18.90  1.0  0.0   4.0   4.0\n17        Fiat 128  32.4  4.0   78.7   66.0  ...  19.47  1.0  1.0   4.0   1.0\n18     Honda Civic  30.4  4.0   75.7   52.0  ...  18.52  1.0  1.0   4.0   2.0\n19  Toyota Corolla  33.9  4.0   71.1   65.0  ...  19.90  1.0  1.0   4.0   1.0\n25       Fiat X1-9  27.3  4.0   79.0   66.0  ...  18.90  1.0  1.0   4.0   1.0\n31      Volvo 142E  21.4  4.0  121.0  109.0  ...  18.60  1.0  1.0   4.0   2.0\n\n[12 rows x 12 columns]\n```\n\n\n:::\n:::\n\nother way:\n::: {.cell}\n\n```{.python .cell-code}\nmtcars.query('gear==4')\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n           newhead   mpg  cyl   disp     hp  ...   qsec   vs   am  gear  carb\n0        Mazda RX4  21.0  6.0  160.0  110.0  ...  16.46  0.0  1.0   4.0   4.0\n1    Mazda RX4 Wag  21.0  6.0  160.0  110.0  ...  17.02  0.0  1.0   4.0   4.0\n2       Datsun 710  22.8  4.0  108.0   93.0  ...  18.61  1.0  1.0   4.0   1.0\n7        Merc 240D  24.4  4.0  146.7   62.0  ...  20.00  1.0  0.0   4.0   2.0\n8         Merc 230  22.8  4.0  140.8   95.0  ...  22.90  1.0  0.0   4.0   2.0\n9         Merc 280  19.2  6.0  167.6  123.0  ...  18.30  1.0  0.0   4.0   4.0\n10       Merc 280C  17.8  6.0  167.6  123.0  ...  18.90  1.0  0.0   4.0   4.0\n17        Fiat 128  32.4  4.0   78.7   66.0  ...  19.47  1.0  1.0   4.0   1.0\n18     Honda Civic  30.4  4.0   75.7   52.0  ...  18.52  1.0  1.0   4.0   2.0\n19  Toyota Corolla  33.9  4.0   71.1   65.0  ...  19.90  1.0  1.0   4.0   1.0\n25       Fiat X1-9  27.3  4.0   79.0   66.0  ...  18.90  1.0  1.0   4.0   1.0\n31      Volvo 142E  21.4  4.0  121.0  109.0  ...  18.60  1.0  1.0   4.0   2.0\n\n[12 rows x 12 columns]\n```\n\n\n:::\n:::\n\n### Filters with AND conditions\n\n::: {.cell}\n\n```{.python .cell-code}\nmtcars[(mtcars['cyl'] >4)&(mtcars['gear'] ==5) ]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n           newhead   mpg  cyl   disp     hp  ...  qsec   vs   am  gear  carb\n28  Ford Pantera L  15.8  8.0  351.0  264.0  ...  14.5  0.0  1.0   5.0   4.0\n29    Ferrari Dino  19.7  6.0  145.0  175.0  ...  15.5  0.0  1.0   5.0   6.0\n30   Maserati Bora  15.0  8.0  301.0  335.0  ...  14.6  0.0  1.0   5.0   8.0\n\n[3 rows x 12 columns]\n```\n\n\n:::\n:::\nother way:\n::: {.cell}\n\n```{.python .cell-code}\nmtcars.query('cyl>4 and gear==5')\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n           newhead   mpg  cyl   disp     hp  ...  qsec   vs   am  gear  carb\n28  Ford Pantera L  15.8  8.0  351.0  264.0  ...  14.5  0.0  1.0   5.0   4.0\n29    Ferrari Dino  19.7  6.0  145.0  175.0  ...  15.5  0.0  1.0   5.0   6.0\n30   Maserati Bora  15.0  8.0  301.0  335.0  ...  14.6  0.0  1.0   5.0   8.0\n\n[3 rows x 12 columns]\n```\n\n\n:::\n:::\n\n### Filters with OR conditions\n\n\n::: {.cell}\n\n```{.python .cell-code}\nmtcars[(mtcars['cyl'] ==6) |(mtcars['gear'] ==5) ]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n           newhead   mpg  cyl   disp     hp  ...   qsec   vs   am  gear  carb\n0        Mazda RX4  21.0  6.0  160.0  110.0  ...  16.46  0.0  1.0   4.0   4.0\n1    Mazda RX4 Wag  21.0  6.0  160.0  110.0  ...  17.02  0.0  1.0   4.0   4.0\n3   Hornet 4 Drive  21.4  6.0  258.0  110.0  ...  19.44  1.0  0.0   3.0   1.0\n5          Valiant  18.1  6.0  225.0  105.0  ...  20.22  1.0  0.0   3.0   1.0\n9         Merc 280  19.2  6.0  167.6  123.0  ...  18.30  1.0  0.0   4.0   4.0\n10       Merc 280C  17.8  6.0  167.6  123.0  ...  18.90  1.0  0.0   4.0   4.0\n26   Porsche 914-2  26.0  4.0  120.3   91.0  ...  16.70  0.0  1.0   5.0   2.0\n27    Lotus Europa  30.4  4.0   95.1  113.0  ...  16.90  1.0  1.0   5.0   2.0\n28  Ford Pantera L  15.8  8.0  351.0  264.0  ...  14.50  0.0  1.0   5.0   4.0\n29    Ferrari Dino  19.7  6.0  145.0  175.0  ...  15.50  0.0  1.0   5.0   6.0\n30   Maserati Bora  15.0  8.0  301.0  335.0  ...  14.60  0.0  1.0   5.0   8.0\n\n[11 rows x 12 columns]\n```\n\n\n:::\n:::\n\nother way:\n::: {.cell}\n\n```{.python .cell-code}\nmtcars.query('cyl==6 or gear==5')\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n           newhead   mpg  cyl   disp     hp  ...   qsec   vs   am  gear  carb\n0        Mazda RX4  21.0  6.0  160.0  110.0  ...  16.46  0.0  1.0   4.0   4.0\n1    Mazda RX4 Wag  21.0  6.0  160.0  110.0  ...  17.02  0.0  1.0   4.0   4.0\n3   Hornet 4 Drive  21.4  6.0  258.0  110.0  ...  19.44  1.0  0.0   3.0   1.0\n5          Valiant  18.1  6.0  225.0  105.0  ...  20.22  1.0  0.0   3.0   1.0\n9         Merc 280  19.2  6.0  167.6  123.0  ...  18.30  1.0  0.0   4.0   4.0\n10       Merc 280C  17.8  6.0  167.6  123.0  ...  18.90  1.0  0.0   4.0   4.0\n26   Porsche 914-2  26.0  4.0  120.3   91.0  ...  16.70  0.0  1.0   5.0   2.0\n27    Lotus Europa  30.4  4.0   95.1  113.0  ...  16.90  1.0  1.0   5.0   2.0\n28  Ford Pantera L  15.8  8.0  351.0  264.0  ...  14.50  0.0  1.0   5.0   4.0\n29    Ferrari Dino  19.7  6.0  145.0  175.0  ...  15.50  0.0  1.0   5.0   6.0\n30   Maserati Bora  15.0  8.0  301.0  335.0  ...  14.60  0.0  1.0   5.0   8.0\n\n[11 rows x 12 columns]\n```\n\n\n:::\n:::\n\n\n### filter row with index\n\n#### 5th rows\n::: {.cell}\n\n```{.python .cell-code}\n# not in siuba, in pandas\nmtcars.iloc[[4]]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n             newhead   mpg  cyl   disp     hp  ...   qsec   vs   am  gear  carb\n4  Hornet Sportabout  18.7  8.0  360.0  175.0  ...  17.02  0.0  0.0   3.0   2.0\n\n[1 rows x 12 columns]\n```\n\n\n:::\n:::\n\n#### 1 and 5tj rows\n::: {.cell}\n\n```{.python .cell-code}\n# not in siuba, in pandas\nmtcars.iloc[[0,4]]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n             newhead   mpg  cyl   disp     hp  ...   qsec   vs   am  gear  carb\n0          Mazda RX4  21.0  6.0  160.0  110.0  ...  16.46  0.0  1.0   4.0   4.0\n4  Hornet Sportabout  18.7  8.0  360.0  175.0  ...  17.02  0.0  0.0   3.0   2.0\n\n[2 rows x 12 columns]\n```\n\n\n:::\n:::\n\n#### 1 to 5th rows\n::: {.cell}\n\n```{.python .cell-code}\n# not in siuba, in pandas\nmtcars.iloc[0:4]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n          newhead   mpg  cyl   disp     hp  ...   qsec   vs   am  gear  carb\n0       Mazda RX4  21.0  6.0  160.0  110.0  ...  16.46  0.0  1.0   4.0   4.0\n1   Mazda RX4 Wag  21.0  6.0  160.0  110.0  ...  17.02  0.0  1.0   4.0   4.0\n2      Datsun 710  22.8  4.0  108.0   93.0  ...  18.61  1.0  1.0   4.0   1.0\n3  Hornet 4 Drive  21.4  6.0  258.0  110.0  ...  19.44  1.0  0.0   3.0   1.0\n\n[4 rows x 12 columns]\n```\n\n\n:::\n:::\n#### get ramdon 5 rows\n\n::: {.cell}\n\n```{.python .cell-code}\nmtcars.sample(5, random_state=42)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                newhead   mpg  cyl   disp     hp  ...   qsec   vs   am  gear  carb\n29         Ferrari Dino  19.7  6.0  145.0  175.0  ...  15.50  0.0  1.0   5.0   6.0\n15  Lincoln Continental  10.4  8.0  460.0  215.0  ...  17.82  0.0  0.0   3.0   4.0\n24     Pontiac Firebird  19.2  8.0  400.0  175.0  ...  17.05  0.0  0.0   3.0   2.0\n17             Fiat 128  32.4  4.0   78.7   66.0  ...  19.47  1.0  1.0   4.0   1.0\n8              Merc 230  22.8  4.0  140.8   95.0  ...  22.90  1.0  0.0   4.0   2.0\n\n[5 rows x 12 columns]\n```\n\n\n:::\n:::\n\n\n## Append\n\n\n### append by row\n\n::: {.cell}\n\n```{.python .cell-code}\n# not available in siuba yet\n#from siuba import bind_rows\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\n# using pandas\n\n# get 1 to 4 rows\ndata1=mtcars.iloc[0:4]\n\n# get 9 rows\ndata2=mtcars.iloc[10:11]\n\ndata3=pd.concat([data1, data2], ignore_index = True,axis=0)\n\ndata3\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n          newhead   mpg  cyl   disp     hp  ...   qsec   vs   am  gear  carb\n0       Mazda RX4  21.0  6.0  160.0  110.0  ...  16.46  0.0  1.0   4.0   4.0\n1   Mazda RX4 Wag  21.0  6.0  160.0  110.0  ...  17.02  0.0  1.0   4.0   4.0\n2      Datsun 710  22.8  4.0  108.0   93.0  ...  18.61  1.0  1.0   4.0   1.0\n3  Hornet 4 Drive  21.4  6.0  258.0  110.0  ...  19.44  1.0  0.0   3.0   1.0\n4       Merc 280C  17.8  6.0  167.6  123.0  ...  18.90  1.0  0.0   4.0   4.0\n\n[5 rows x 12 columns]\n```\n\n\n:::\n:::\n\n\n### append by column\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\n# using pandas\ndata1=small_mtcars[[\"cyl\", \"mpg\"]]\n\ndata2=small_mtcars[['hp']]\n\ndata3=pd.concat([data1, data2], axis=1).reindex(data2.index)\n\ndata3\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   cyl   mpg     hp\n0  6.0  21.0  110.0\n1  6.0  21.0  110.0\n2  4.0  22.8   93.0\n3  6.0  21.4  110.0\n4  8.0  18.7  175.0\n```\n\n\n:::\n:::\n\n\n### Dropping NA values\n\n\n### keep NA values\n\n\n\n## group by\n\n### average,min,max,sum\n\n::: {.cell}\n\n```{.python .cell-code}\nmtcars.groupby(\"cyl\")[\"hp\"].mean()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\ncyl\n4.0     82.636364\n6.0    122.285714\n8.0    209.214286\nName: hp, dtype: float64\n```\n\n\n:::\n:::\n::: {.cell}\n\n```{.python .cell-code}\nmtcars.groupby(\"cyl\")[\"hp\"].min()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\ncyl\n4.0     52.0\n6.0    105.0\n8.0    150.0\nName: hp, dtype: float64\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\nmtcars.groupby(\"cyl\")[\"hp\"].max()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\ncyl\n4.0    113.0\n6.0    175.0\n8.0    335.0\nName: hp, dtype: float64\n```\n\n\n:::\n:::\n\n\n::: {.cell}\n\n```{.python .cell-code}\nmtcars.groupby(\"cyl\")[\"hp\"].sum()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\ncyl\n4.0     909.0\n6.0     856.0\n8.0    2929.0\nName: hp, dtype: float64\n```\n\n\n:::\n:::\n\n### count record and count distinct record\n\n::: {.cell}\n\n```{.python .cell-code}\nmtcars.groupby(\"cyl\")[\"hp\"].count()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\ncyl\n4.0    11\n6.0     7\n8.0    14\nName: hp, dtype: int64\n```\n\n\n:::\n:::\n\n\n::: {.cell}\n\n```{.python .cell-code}\nmtcars.groupby(\"cyl\")[\"hp\"].nunique()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\ncyl\n4.0    10\n6.0     4\n8.0     9\nName: hp, dtype: int64\n```\n\n\n:::\n:::\n\n\n## order rows\n\n::: {.cell}\n\n```{.python .cell-code}\nsmall_mtcars.sort_values('hp')\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   cyl   mpg     hp  mpg2   mpg3    mpg4\n2  4.0  22.8   93.0  23.8   long    long\n0  6.0  21.0  110.0  22.0   long  Medium\n1  6.0  21.0  110.0  22.0   long  Medium\n3  6.0  21.4  110.0  22.4   long  Medium\n4  8.0  18.7  175.0  19.7  short   short\n```\n\n\n:::\n:::\n\n### Sort in descending order\n\n::: {.cell}\n\n```{.python .cell-code}\nsmall_mtcars.sort_values('hp',ascending=False)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   cyl   mpg     hp  mpg2   mpg3    mpg4\n4  8.0  18.7  175.0  19.7  short   short\n0  6.0  21.0  110.0  22.0   long  Medium\n1  6.0  21.0  110.0  22.0   long  Medium\n3  6.0  21.4  110.0  22.4   long  Medium\n2  4.0  22.8   93.0  23.8   long    long\n```\n\n\n:::\n:::\n\n### Arrange by multiple variables\n\n\n::: {.cell}\n\n```{.python .cell-code}\nsmall_mtcars.sort_values(by=['cyl','mpg'])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   cyl   mpg     hp  mpg2   mpg3    mpg4\n2  4.0  22.8   93.0  23.8   long    long\n0  6.0  21.0  110.0  22.0   long  Medium\n1  6.0  21.0  110.0  22.0   long  Medium\n3  6.0  21.4  110.0  22.4   long  Medium\n4  8.0  18.7  175.0  19.7  short   short\n```\n\n\n:::\n:::\n## join\n\n::: {.cell}\n\n```{.python .cell-code}\n\nlhs = pd.DataFrame({'id': [1,2,3], 'val': ['lhs.1', 'lhs.2', 'lhs.3']})\nrhs = pd.DataFrame({'id': [1,2,4], 'val': ['rhs.1', 'rhs.2', 'rhs.3']})\n```\n:::\n\n\n::: {.cell}\n\n```{.python .cell-code}\nlhs\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   id    val\n0   1  lhs.1\n1   2  lhs.2\n2   3  lhs.3\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\nrhs\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   id    val\n0   1  rhs.1\n1   2  rhs.2\n2   4  rhs.3\n```\n\n\n:::\n:::\n\n\n### inner_join\n\n::: {.cell}\n\n```{.python .cell-code}\nresult=pd.merge(lhs, rhs, on='id', how='inner')\nresult\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   id  val_x  val_y\n0   1  lhs.1  rhs.1\n1   2  lhs.2  rhs.2\n```\n\n\n:::\n:::\n\n\n### full join\n\n::: {.cell}\n\n```{.python .cell-code}\nresult=pd.merge(lhs, rhs, on='id', how='outer')\nresult\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   id  val_x  val_y\n0   1  lhs.1  rhs.1\n1   2  lhs.2  rhs.2\n2   3  lhs.3    NaN\n3   4    NaN  rhs.3\n```\n\n\n:::\n:::\n\n\n\n### left join \n\n::: {.cell}\n\n```{.python .cell-code}\nresult=pd.merge(lhs, rhs, on='id', how='left')\nresult\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   id  val_x  val_y\n0   1  lhs.1  rhs.1\n1   2  lhs.2  rhs.2\n2   3  lhs.3    NaN\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n## Reshape tables\n\n\n::: {.cell}\n\n```{.python .cell-code}\ncosts = pd.DataFrame({\n    'id': [1,2],\n    'price_x': [.1, .2],\n    'price_y': [.4, .5],\n    'price_z': [.7, .8]\n})\n\ncosts\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   id  price_x  price_y  price_z\n0   1      0.1      0.4      0.7\n1   2      0.2      0.5      0.8\n```\n\n\n:::\n:::\n\n\n### Gather data long(wide to long)\n\n::: {.cell}\n\n```{.python .cell-code}\n# selecting each variable manually\nlong_date=pd.melt(costs,id_vars=['id'], value_vars=['price_x', 'price_y','price_z'])\n\nlong_date\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   id variable  value\n0   1  price_x    0.1\n1   2  price_x    0.2\n2   1  price_y    0.4\n3   2  price_y    0.5\n4   1  price_z    0.7\n5   2  price_z    0.8\n```\n\n\n:::\n\n```{.python .cell-code}\n#costs >> gather('measure', 'value', _.price_x, _.price_y, _.price_z)\n```\n:::\n\n\n### Spread data wide (long to wide)\n\n\n::: {.cell}\n\n```{.python .cell-code}\nlong_date.pivot(index=\"id\", columns=\"variable\", values=\"value\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nvariable  price_x  price_y  price_z\nid                                 \n1             0.1      0.4      0.7\n2             0.2      0.5      0.8\n```\n\n\n:::\n:::\n\n\n\n\n## string\n\n::: {.cell}\n\n```{.python .cell-code}\ndf = pd.DataFrame({'text': ['abc', 'DDD','1243c','aeEe'], 'num': [3, 4,7,8]})\n\ndf\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    text  num\n0    abc    3\n1    DDD    4\n2  1243c    7\n3   aeEe    8\n```\n\n\n:::\n:::\n\n### upper case\n\n\n### lower case\n\n### match\n\n\n\n###  concatenation\n\n\n\n### replace\n\n\n### extract\n\nUse str.extract() with a regular expression to pull out a matching piece of text.\n\nFor example the regular expression “^(.*) ” contains the following pieces:\n\n-  a matches the literal letter “a”\n\n- .* has a . which matches anything, and * which modifies it to apply 0 or more times.\n\n\n\n\n\n## date\n\n::: {.cell}\n\n```{.python .cell-code}\ndf_dates = pd.DataFrame({\n    \"dates\": pd.to_datetime([\"2021-01-02\", \"2021-02-03\"]),\n    \"raw\": [\"2023-04-05 06:07:08\", \"2024-05-06 07:08:09\"],\n})\ndf_dates\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n       dates                  raw\n0 2021-01-02  2023-04-05 06:07:08\n1 2021-02-03  2024-05-06 07:08:09\n```\n\n\n:::\n:::\n\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\ndf_dates.info()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 2 entries, 0 to 1\nData columns (total 2 columns):\n #   Column  Non-Null Count  Dtype         \n---  ------  --------------  -----         \n 0   dates   2 non-null      datetime64[ns]\n 1   raw     2 non-null      object        \ndtypes: datetime64[ns](1), object(1)\nmemory usage: 164.0+ bytes\n```\n\n\n:::\n:::\n\n\n\n## dataframe to numpy array\n\n::: {.cell}\n\n```{.python .cell-code}\ndf_dates.to_numpy()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\narray([[Timestamp('2021-01-02 00:00:00'), '2023-04-05 06:07:08'],\n       [Timestamp('2021-02-03 00:00:00'), '2024-05-06 07:08:09']],\n      dtype=object)\n```\n\n\n:::\n:::\n\n\n\n\n# Reference:\n\nhttps://pandas.pydata.org/docs/user_guide\n\n\n\n\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}