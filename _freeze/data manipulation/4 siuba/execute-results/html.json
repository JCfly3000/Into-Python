{
  "hash": "1e4a802f3258469ba0554be2da783499",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Data manipulation with siuba\"\nauthor: \"Tony Duan\"\n\nexecute:\n  warning: false\n  error: false\n  eval: false\n   \nformat:\n  html:\n    toc: true\n    toc-location: right\n    code-fold: show\n    code-tools: true\n    number-sections: true\n    code-block-bg: true\n    code-block-border-left: \"#31BAE9\"\n---\n\n![](images/siuba_small.svg){width=\"434\"}\nsiuba (小巴) is a port of dplyr and other R libraries with seamless support for pandas and SQL\n\n## Comparison with different python dataframe package\n\n\n![](images/2.png){width=\"656\"}\n\n## Package download\n\n::: {#4acd3557 .cell execution_count=1}\n``` {.python .cell-code}\nimport sys\nprint(sys.version)\n```\n:::\n\n\n::: {#78170011 .cell execution_count=2}\n``` {.python .cell-code}\nimport os\n#os.system('pip install --upgrade pandas')\nos.system('pip install siuba')\n```\n:::\n\n\n## load package\n\n::: {#643a9309 .cell execution_count=3}\n``` {.python .cell-code}\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pylab as plt\nimport seaborn as sns\n\n\n\nfrom siuba.siu import call\nfrom siuba import _, mutate, filter, group_by, summarize,show_query\nfrom siuba import *\n\nfrom siuba.data import mtcars,penguins\n```\n:::\n\n\n::: {#46489e67 .cell execution_count=4}\n``` {.python .cell-code}\nimport os\nos.system('pip show siuba')\n```\n:::\n\n\n::: {#460f146a .cell execution_count=5}\n``` {.python .cell-code}\nsmall_mtcars = mtcars >> select(_.cyl, _.mpg, _.hp)>> head(5)\n```\n:::\n\n\n## select column\n\n### get column names\n\n::: {#b983b9ce .cell execution_count=6}\n``` {.python .cell-code}\nlist(small_mtcars)\n```\n:::\n\n\n### select columns by name\n\n::: {#0c361e5c .cell execution_count=7}\n``` {.python .cell-code}\nsmall_mtcars >> select(_.cyl, _.mpg)\n```\n:::\n\n\n### select columns by name match with 'p'\n\n::: {#7bedc292 .cell execution_count=8}\n``` {.python .cell-code}\nsmall_mtcars >> select(_.contains(\"p\"))\n```\n:::\n\n\n### select columns by index\n\n#### select first and 3rd columns\n\n::: {#e3314e21 .cell execution_count=9}\n``` {.python .cell-code}\nsmall_mtcars >> select(0,2)\n```\n:::\n\n\n#### select first to 3rd columns\n\n::: {#5bf595e6 .cell execution_count=10}\n``` {.python .cell-code}\nsmall_mtcars >> select(_[0:3])\n```\n:::\n\n\n## drop column\n\n::: {#75efbefe .cell execution_count=11}\n``` {.python .cell-code}\nsmall_mtcars >> select(~_.cyl)\n```\n:::\n\n\n## Renaming column\n\n::: {#31079f11 .cell execution_count=12}\n``` {.python .cell-code}\nsmall_mtcars >> rename(new_name_mpg = _.mpg)\n```\n:::\n\n\n## Create column\n\n### Mutate\n\n::: {#9fc29f1a .cell execution_count=13}\n``` {.python .cell-code}\nmtcars.head()>> mutate(gear2 = _.gear+1\n                      ,gear3=if_else(_.gear > 3, \"long\", \"short\")\n                       ,qsec2=case_when({\n                                          _.qsec <= 17: \"short\",\n                                          _.qsec <= 18: \"Medium\",\n                                          True: \"long\"\n                                                     })\n                       )\n```\n:::\n\n\n### Transmute,create column and only keep this column\n\n::: {#6432c133 .cell execution_count=14}\n``` {.python .cell-code}\nmtcars.head()>> transmute(gear2 = _.gear+1)\n```\n:::\n\n\n## Filter rows\n\n::: {#b3fab687 .cell execution_count=15}\n``` {.python .cell-code}\nmtcars>> filter(_.gear ==4)\n```\n:::\n\n\n### Filters with AND conditions\n\n::: {#a89f3c6b .cell execution_count=16}\n``` {.python .cell-code}\nmtcars >> filter((_.cyl >4) & (_.gear == 5))\n```\n:::\n\n\n### Filters with OR conditions\n\n::: {#339ad347 .cell execution_count=17}\n``` {.python .cell-code}\nmtcars >> filter((_.cyl == 6) | (_.gear == 5))\n```\n:::\n\n\n### filter row with index\n\n#### first 3\n\n::: {#09e77916 .cell execution_count=18}\n``` {.python .cell-code}\nsmall_mtcars>>head(3)\n```\n:::\n\n\n#### last 3\n\n::: {#4d982a56 .cell execution_count=19}\n``` {.python .cell-code}\n# not in siuba, in pandas\nsmall_mtcars.tail(3)\n```\n:::\n\n\n#### 5th rows\n\n::: {#05917bff .cell execution_count=20}\n``` {.python .cell-code}\n# not in siuba, in pandas\nmtcars.iloc[[4]]\n```\n:::\n\n\n#### 1 and 5th rows\n\n::: {#04c09022 .cell execution_count=21}\n``` {.python .cell-code}\n# not in siuba, in pandas\nmtcars.iloc[[0,4]]\n```\n:::\n\n\n#### 1 to 5th rows\n\n::: {#e7026eec .cell execution_count=22}\n``` {.python .cell-code}\n# not in siuba, in pandas\nmtcars.iloc[0:4]\n```\n:::\n\n\n#### get ramdon 5 rows\n\n::: {#566762b7 .cell execution_count=23}\n``` {.python .cell-code}\nmtcars.sample(5, random_state=42)\n```\n:::\n\n\n## Append\n\n\n### append by row\n\n::: {#898e38ba .cell execution_count=24}\n``` {.python .cell-code}\n# not available in siuba yet\n#from siuba import bind_rows\n```\n:::\n\n\n::: {#1cfc6eb1 .cell execution_count=25}\n``` {.python .cell-code}\n# using pandas\n\n# get 1 to 4 rows\ndata1=mtcars.iloc[0:4]\n\n# get 9 rows\ndata2=mtcars.iloc[10:11]\n\ndata3=pd.concat([data1, data2], ignore_index = True,axis=0)\n\ndata3\n```\n:::\n\n\n### append by column\n\n::: {#d896f42f .cell execution_count=26}\n``` {.python .cell-code}\n# not available in siuba yet\n#from siuba import bind_columns\n```\n:::\n\n\n::: {#96a3fe48 .cell execution_count=27}\n``` {.python .cell-code}\n# using pandas\ndata1=small_mtcars>>select(_.mpg)\n\ndata2=small_mtcars>>select(_.cyl)\n\ndata3=pd.concat([data1, data2],axis=1)\n\ndata3\n```\n:::\n\n\n### Dropping NA values\n\n\n### keep NA values\n\n\n\n## group by\n\n### average,min,max,sum\n\n::: {#c2cebffc .cell execution_count=28}\n``` {.python .cell-code}\ntbl_query = (mtcars\n  >> group_by(_.cyl)\n  >> summarize(avg_hp = _.hp.mean()\n              ,min_hp=_.hp.min()\n              ,max_hp=_.hp.max()\n              ,totol_disp=_.disp.sum()\n  )\n  )\n\ntbl_query\n```\n:::\n\n\n### count record and count distinct record\n\n::: {#d3af293f .cell execution_count=29}\n``` {.python .cell-code}\nmtcars >> group_by(_.cyl)  >> summarize(n = _.shape[0])\n```\n:::\n\n\n::: {#6addf6cd .cell execution_count=30}\n``` {.python .cell-code}\nmtcars >> group_by(_.cyl)  >> summarize(n = _.hp.nunique())\n```\n:::\n\n\n## order rows\n\n::: {#b4ad597a .cell execution_count=31}\n``` {.python .cell-code}\nsmall_mtcars >> arrange(_.hp)\n```\n:::\n\n\n### Sort in descending order\n\n::: {#b53c1220 .cell execution_count=32}\n``` {.python .cell-code}\nsmall_mtcars >> arrange(-_.hp)\n```\n:::\n\n\n### Arrange by multiple variables\n\n::: {#98556889 .cell execution_count=33}\n``` {.python .cell-code}\nsmall_mtcars >> arrange(_.cyl, -_.mpg)\n```\n:::\n\n\n## join\n\n::: {#ece27024 .cell execution_count=34}\n``` {.python .cell-code}\nlhs = pd.DataFrame({'id': [1,2,3], 'val': ['lhs.1', 'lhs.2', 'lhs.3']})\nrhs = pd.DataFrame({'id': [1,2,4], 'val': ['rhs.1', 'rhs.2', 'rhs.3']})\n```\n:::\n\n\n::: {#f4a623e8 .cell execution_count=35}\n``` {.python .cell-code}\nlhs\n```\n:::\n\n\n::: {#284f52d2 .cell execution_count=36}\n``` {.python .cell-code}\nrhs\n```\n:::\n\n\n### inner_join\n\n::: {#670e18c3 .cell execution_count=37}\n``` {.python .cell-code}\nresult=lhs >> inner_join(_, rhs, on=\"id\")\nresult\n```\n:::\n\n\n### full join\n\n::: {#6e662c70 .cell execution_count=38}\n``` {.python .cell-code}\nresult=rhs >> full_join(_, lhs, on=\"id\")\nresult\n```\n:::\n\n\n### left join \n\n::: {#2971605f .cell execution_count=39}\n``` {.python .cell-code}\nresult=lhs >> left_join(_, rhs, on=\"id\")\nresult\n```\n:::\n\n\n### anti join\n\nkeep data in left which not in right\n\n::: {#a7967b51 .cell execution_count=40}\n``` {.python .cell-code}\nresult=lhs >> anti_join(_, rhs, on=\"id\")\nresult\n```\n:::\n\n\nkeep data in right which not in left\n\n::: {#f9794899 .cell execution_count=41}\n``` {.python .cell-code}\nresult=rhs >> anti_join(_, lhs, on=\"id\")\nresult\n```\n:::\n\n\n## Reshape tables\n\n::: {#d7bce303 .cell execution_count=42}\n``` {.python .cell-code}\ncosts = pd.DataFrame({\n    'id': [1,2],\n    'price_x': [.1, .2],\n    'price_y': [.4, .5],\n    'price_z': [.7, .8]\n})\n\ncosts\n```\n:::\n\n\n### Gather data long(wide to long)\n\nBelow 3 method will give same result\n\n::: {#ba1424b4 .cell execution_count=43}\n``` {.python .cell-code}\n# selecting each variable manually\ncosts >> gather('measure', 'value', _.price_x, _.price_y, _.price_z)\n```\n:::\n\n\nother way:\n\n::: {#88f2228b .cell execution_count=44}\n``` {.python .cell-code}\n# selecting variables using a slice\ncosts >> gather('measure', 'value', _[\"price_x\":\"price_z\"])\n```\n:::\n\n\nother way:\n\n::: {#f408b0ec .cell execution_count=45}\n``` {.python .cell-code}\n# selecting by excluding id\ncosts >> gather('measure', 'value', -_.id)\n```\n:::\n\n\n### Spread data wide(long to wide)\n\n::: {#510ba6f2 .cell execution_count=46}\n``` {.python .cell-code}\ncosts_long= costs>> gather('measure', 'value', -_.id)\ncosts_long\n```\n:::\n\n\n::: {#729a4e82 .cell execution_count=47}\n``` {.python .cell-code}\ncosts_long>> spread('measure', 'value')\n```\n:::\n\n\n## string\n\n::: {#db632c6c .cell execution_count=48}\n``` {.python .cell-code}\ndf = pd.DataFrame({'text': ['abc', 'DDD','1243c','aeEe'], 'num': [3, 4,7,8]})\n\ndf\n```\n:::\n\n\n### upper case\n\n::: {#d051e534 .cell execution_count=49}\n``` {.python .cell-code}\ndf>> mutate(text_new=_.text.str.upper())\n```\n:::\n\n\n### lower case\n\n::: {#686616a8 .cell execution_count=50}\n``` {.python .cell-code}\ndf>> mutate(text_new=_.text.str.lower())\n```\n:::\n\n\n### match\n\n::: {#2b52bc18 .cell execution_count=51}\n``` {.python .cell-code}\ndf>> mutate(text_new1=if_else(_.text== \"abc\",'T','F')\n            ,text_new2=if_else(_.text.str.startswith(\"a\"),'T','F')\n            ,text_new3=if_else(_.text.str.endswith(\"c\"),'T','F')\n            ,text_new4=if_else(_.text.str.contains(\"4\"),'T','F')\n\n)\n```\n:::\n\n\n###  concatenation\n\n::: {#e30f5d1c .cell execution_count=52}\n``` {.python .cell-code}\ndf>> mutate(text_new1=_.text+' is '+_.text\n)\n```\n:::\n\n\n### replace\n\nUse .str.replace(..., regex=True) with regular expressions to replace patterns in strings.\n\nFor example, the code below uses \"p.\", where . is called a wildcard–which matches any character.\n\n::: {#f89e2fe3 .cell execution_count=53}\n``` {.python .cell-code}\ndf>> mutate(text_new1=_.text.str.replace(\"a.\", \"XX\", regex=True)\n)\n```\n:::\n\n\n### extract\n\nUse str.extract() with a regular expression to pull out a matching piece of text.\n\nFor example the regular expression “^(.*) ” contains the following pieces:\n\n-  a matches the literal letter “a”\n\n- .* has a . which matches anything, and * which modifies it to apply 0 or more times.\n\n::: {#c22e836d .cell execution_count=54}\n``` {.python .cell-code}\ndf>> mutate(text_new1=_.text.str.extract(\"a(.*)\")\n            ,text_new2=_.text.str.extract(\"(.*)c\")\n)\n```\n:::\n\n\n## date\n\n::: {#ecab7ac6 .cell execution_count=55}\n``` {.python .cell-code}\ndf_dates = pd.DataFrame({\n    \"dates\": pd.to_datetime([\"2021-01-02\", \"2021-02-03\"]),\n    \"raw\": [\"2023-04-05 06:07:08\", \"2024-05-06 07:08:09\"],\n})\ndf_dates\n```\n:::\n\n\n::: {#06388082 .cell execution_count=56}\n``` {.python .cell-code}\nfrom datetime import datetime\n\ndf_date=df_dates>>mutate(month=_.dates.dt.month_name()\n                  ,date_format_raw = call(pd.to_datetime, _.raw)\n                  ,date_format_raw_year=_.date_format_raw.dt.year\n\n)\n\ndf_date\n```\n:::\n\n\n::: {#780e1ffc .cell execution_count=57}\n``` {.python .cell-code}\ndf_date.info()\n```\n:::\n\n\n## using siuba with database\n\n### set up a sqlite database, with an mtcars table.\n\n::: {#abc8de7f .cell execution_count=58}\n``` {.python .cell-code}\nfrom sqlalchemy import create_engine\nfrom siuba.sql import LazyTbl\nfrom siuba import _, group_by, summarize, show_query, collect \nfrom siuba.data import mtcars\n\n# copy in to sqlite, using the pandas .to_sql() method\nengine = create_engine(\"sqlite:///:memory:\")\nmtcars.to_sql(\"mtcars\", engine, if_exists = \"replace\")\n```\n:::\n\n\n### create table\n\n::: {#1de19fdb .cell execution_count=59}\n``` {.python .cell-code}\n# Create a lazy SQL DataFrame\ntbl_mtcars = LazyTbl(engine, \"mtcars\")\ntbl_mtcars\n```\n:::\n\n\n### create query\n\n::: {#e504edcf .cell execution_count=60}\n``` {.python .cell-code}\n# connect with siuba\n\ntbl_query = (tbl_mtcars\n  >> group_by(_.mpg)\n  >> summarize(avg_hp = _.hp.mean())\n  )\n\ntbl_query\n```\n:::\n\n\n### show query\n\n::: {#5e6dacde .cell execution_count=61}\n``` {.python .cell-code}\n tbl_query >> show_query()\n```\n:::\n\n\n### Collect to DataFrame\n\nbecause lazy expressions,the collect function is actually running the sql.\n\n::: {#761be449 .cell execution_count=62}\n``` {.python .cell-code}\ndata=tbl_query >> collect()\nprint(data)\n```\n:::\n\n\n## reference:\n\nhttps://siuba.org/\n\n",
    "supporting": [
      "4 siuba_files"
    ],
    "filters": [],
    "includes": {}
  }
}